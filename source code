import java.util.Scanner;
import java.io.*;
//import necessary libraries to work with files and scanners

public class Blabber{
    public static void main(String[] args) throws IOException{

        /*In the main method we check input is valid and call the appropiate methods
        while loop so that the program will run as many times as necessary. The condition is true so it will always run which is why we need an if statement inside the loop that 
        allow us to break out of it*/
        while(true){
            Scanner input = new Scanner(System.in);
            System.out.println("Give a command or type quit to exit"); 
            //we take in user input with nextLine and store all the words in an array using split method at the space
            String userInput = input.nextLine();
            String [] userInputArray = userInput.split(" ");
           //checks if the user wants to exit or not
            if(userInputArray[0].equalsIgnoreCase("quit")){
                break;
            }
             /*use a switch statement of Strings with userInputArray[0] since we know the command will always be the 
            first thing the user enters. We pass the argumets as the second and third elements of the array depending
            on which method we are calling. We also need to check if the length of the array is the appropiate one for 
            each method. Ex. createAccount only accepts one parameter so the array length is 2, the command and the argument*/
                switch(userInputArray[0]){

                case "createAccount":
                    if(userInputArray.length == 2){
                        createAccount(userInputArray[1]);
                    }else{
                        System.out.println("Error: Please provide one username.");
                    }
                break;

                case "followAccount":
                    if(userInputArray.length == 3){
                        followAccount(userInputArray[1],userInputArray[2]);
                    }else{
                       System.out.println("Error: You must provide two usernames");
                    } 
                break;

                case "postBlab":
                    if(userInputArray.length == 3){
                        postBlab(userInputArray[1],userInputArray[2]);
                    }else{
                       System.out.println("Error: please provide a username and a blab.");
                    }
                break;

                case "viewTimeline":
                /* Here we need to check if the user entered the ReverseOrder option. We will know due to the length
                 of the userInputArray. We also need to check if the entered ReverseOrder and not something else*/
                    if(userInputArray.length == 2){
                        viewTimeline(userInputArray[1],false);
                    }else if(userInputArray.length == 3 && userInputArray[2].equals("ReverseOrder")){
                        viewTimeline(userInputArray[1],true);
                    }else{
                       System.out.println("Error: expected one username, and an optional ReverseOrder argument.");
                    }
                break;

                default:
                /*The default case is necessary so we can let the user know their input is not valid */
                    System.out.println("Error: Invalid request.");
                break;
            }    
        }
    }
    
    public static int createAccount(String username)throws IOException{
        //Call isAlphanumeric and account exists to make sure the username is valid
       if(username.equalsIgnoreCase("blabs") || !isAlphanumeric(username,username.length()-1)){
            System.out.println("Error: Invalid username.");
            return 2;
        }else if(accountExists(username + ".txt")){
            System.out.println("Error: An account with username " + username + " already exists.");
            return 1;
        }else{
            //call createFile method to create the file
            System.out.println("Success!");
            createFile(username);
        }return 0;
    }

    public static int followAccount(String username, String usernameToFollow) throws IOException {
        //make sure the usernames are not equal, that they exist and that neither is "blabs"
        if(username.equalsIgnoreCase(usernameToFollow)){
            System.out.println("Error: a user can't follow themselves.");
            return 2;
        }else if(!accountExists(username + ".txt") || !accountExists(usernameToFollow + ".txt") || 
            username.equalsIgnoreCase("blabs") || usernameToFollow.equalsIgnoreCase("blabs")){
            System.out.println("Error: At least one of the usernames is invalid or does not exist");
            return 1;
        }else if(arrayContains(readFile(username + ".txt"),usernameToFollow)){
            /*call arrayContains with the return value of readFile(username + ".txt") as the first parameter and 
            usernameToFollow as the second parameter to make sure username doesn't already follow usernameToFollow*/
            System.out.println("Error: A user may only follow another user once.");
            return 1;
        }else{
            //use the write function to write usernameToFollow to username's file
            write(username, usernameToFollow, true);
            System.out.println("Success!");
            return 0;
        }
    }

    public static int postBlab(String username, String blab)throws IOException{
        //call accountExists and check it is not blabs to make sure the input is valid
       if(!accountExists(username + ".txt") || username.equalsIgnoreCase("blabs")){
            System.out.println("Error: Invalid username provided, or the username doesn't exist.");
            return 1;
        }else if(!isAlphanumeric(blab,blab.length()-1)){
            //call isAlphanumeric to check if the blab is valid
            System.out.println("Error: Invalid blab");
            return 2;
        }else{
            //call the write method to write blabToWrite to blabs file
            String blabToWrite = username + "-" + blab;
            write("blabs", blabToWrite, true);
            System.out.println("Success: blab " + blab + " posted by user " + username);
            return 0;
        }
    }

    public static int viewTimeline(String username, boolean reverse) throws IOException{
        //make sure input is valid by calling accountExists and checking it is not blabs 
        if(!accountExists(username + ".txt") || username.equalsIgnoreCase("blabs")){
            System.out.println("Error: invalid username provided, or the username doesn't exist");
            return 1;
        }else if(numLines(username + ".txt")==0){
            System.out.println("Error: " + username + " does not follow another user" );
            return 2;
        }else if(reverse){
            displayReversedContent(readFile("blabs.txt"),readFile(username + ".txt"),numLines("blabs.txt")-1);
            return 0;
        }else
            displayContent(readFile("blabs.txt"),readFile(username + ".txt"));
            return 0;   
    }

    public static boolean fileExists(String fileName){
        //create a file object and use the method isFile() to check if the file exists
        File file = new File (fileName);
        return (file.isFile());
    }

    public static boolean accountExists(String username){
        //call fileExists to check if the accountExists
        return (fileExists(username));
    }

    public static int numLines(String fileName) throws IOException {
        /*create a File object and set the counter lines  to zero. Iterate through the file and increase the 
        counter evrytime you read a line then return the counter */
        File file = new File (fileName);
        int lines = 0;

        if(fileExists(fileName)){
        Scanner sc = new Scanner(file);
            while(sc.hasNextLine()){
                sc.nextLine();
                lines++;
            }
        }
        return lines;
    }

    public static boolean isAlphanumeric(String phrase, int index){
        /*create a base case that occurs when the index is less than zero meaning the phrase has been iterated 
        through. Iterate through the String and use the isLetterOrDigit() method to check if it is alphanumeric. 
        If it is, return the recursive call isAlphanumeric(phrase,index-1) until it is not aplhanumeric or you 
        reach the base case*/
        if(index<0){
            return true;
        }else{
            if(!Character.isLetterOrDigit(phrase.charAt(index))){
                return false;
            }
        }return isAlphanumeric(phrase,index-1);
    }

    public static String[] readFile(String fileName) throws IOException{
        /*create a File object and if the fileExists returns true create an array calling numLines to get the size.
        Use a Scanner and a for loop to read the file and store each line as an element in the array. Close the scanner 
        and return the content array. If the file doesn't exist return an empty array*/
        File file = new File (fileName);

        if(fileExists(fileName)){
            Scanner sc = new Scanner(file);
            String [] content = new String [numLines(fileName)];
            for (int i=0;i<content.length;i++){
                content[i] = sc.nextLine();   
            }
            sc.close();
            return content;
        }
        String [] content = {};
        return content;
    }

    public static boolean arrayContains(String[] arr, String text){
        /*use a for loop to traverse the array and the equals() method to check if the text argument is the 
        same as the current element of the array */
        for (int i=0;i<arr.length;i++){
            if(text.equals(arr[i])){
                return true;
            }
        }return false;
    }

    public static void displayContent(String[] blabs, String[] followedAccounts){
        /*traverse the blabs array with a for loop and use the split method to obtain the username of the user who
        posted the blab. The username will always be the first element of the array so in another for loop traverse the
        followedAccounts array and compare split[0] with the current element of followedAccounts. If they are equal,
        display the blab.*/
        for (int i=0;i<blabs.length;i++){
            String [] split = blabs[i].split("-");
            for (int j=0;j<followedAccounts.length;j++){
                if((split[0].equalsIgnoreCase(followedAccounts[j])) && (!followedAccounts[j].isEmpty())){
                    System.out.println(blabs[i]);
                }
            }
        }
    }

    public static void displayReversedContent(String[] blabs, String[] followedAccounts, int index){
        /*establish a base case when index is less than zero, meaning we've traversed the whole array (the 
        initial value of idex is the number of lines of the file -1). Traverse the array of followed accounts and 
        use split method to compare the username that posted the blab and the current elemnet of followedAccounts. 
        If they match, print the blab. The recursive call is displayReversedContent(blabs,followedAccounts,index-1)
        and it calls the same method with the index-1*/
        
        if(index<0){
            return;
        }else{
            for (int j=0;j<followedAccounts.length;j++){
                String [] split = blabs[index].split("-");
                if(split[0].equalsIgnoreCase(followedAccounts[j]) && (!followedAccounts[j].isEmpty())){
                    System.out.println(blabs[index]);
                }
            }displayReversedContent(blabs,followedAccounts,index-1); 
        }
    }

    public static void write(String fileName, String text, boolean append) throws IOException{
        /*create a File object and a FileWriter to append text to a file using the escape character \n */
        File file = new File(fileName + ".txt");
        FileWriter writer = new FileWriter(file,append);
        writer.write(text + "\n");
        writer.flush();
        writer.close();
    }

    public static File createFile(String fileName) throws IOException{
        /*create a File object and use the createNewFile() method to create a new file */
        File file = new File(fileName + ".txt");
        file.createNewFile();
        return file;
    }
}
